<#@ template language="C#" hostspecific="true" debug="True" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    //**********************************************************************************************
    // This T4 generates POCOs from the specified DB and saves them to the specified folder which 
    // is relative to the template's location. One file per table/POCO.
    //**********************************************************************************************
 
    //****************************
    // DEFINE YOUR VARIABLES HERE
    //****************************
   // Loop over each table and create a class file!
     Server dbviewModelserver = new Server(sqlServer);
     dbviewModelserver.ConnectionContext.LoginSecure = true;
    //server.ConnectionContext.Login = sqlLogin;
    //server.ConnectionContext.Password = sqlPassword;
    dbviewModelserver.ConnectionContext.Connect();
    
	List<Table> dbviewModeltables = new List<Table>();
	cols = new Dictionary<string,Column>();
	foreach (Table table in dbviewModelserver.Databases[sqlDatabase].Tables)
    {
	   if (table.Name == tableName || table.Name ==transTableName) {
		 foreach (Column col in table.Columns)
			{
			  if (!cols.ContainsKey(col.Name)){

			  // ignoring the FK in Translation Table
			   if (col.Name == tableName + "Id" ) {
				    continue;
				  }
				  cols.Add(col.Name, col);
              }
			}
	      dbviewModeltables.Add(table);
	   }
	}

	for (int k =0 ; k<1; k++) 

    //foreach (Table table in server.Databases[sqlDatabase].Tables)
    {
       
#>

using System;
using Titan.Model;
namespace Titan.Model.ViewModelDB
{
    /// <summary>
    /// Represents a <#= tableName #>.
    /// This class represents the input paramaeters required for Select and Update Stored procedures 
    /// </summary>
    public class <#=tableName#>DbViewModel
    {
<# 
        // Keep count so we don't whitespace the last property/column
        int columnCount = cols.Count;
        int i = 0;
 
        // Iterate all columns
		foreach(KeyValuePair<string,Column> entry in cols)
        //foreach (Column col in table.Columns)
        {
		    Column col = entry.Value;
            i++;
            string propertyType = GetNetDataType(col.DataType.Name);
 
            // If we can't map it, skip it
            if (string.IsNullOrWhiteSpace(propertyType))
            {
                // Skip
                continue;
            }
 
            // Handle nullable columns by making the type nullable
            if (col.Nullable && propertyType != "string")
            {
                propertyType += "?";
            }
#>
        public <#= propertyType #> <#= col.Name #> { get; set; }
<#
            // Do we insert the space?
            if (i == columnCount && !string.IsNullOrEmpty(transTableName))
            {
#>
		public string DefaultLocale { get; set; }
<#
            }
#>
<#
        }
#>
    }
      

	public class <#=tableName#>CreateDbViewModel
    {
<# 
        i = 0;
 
        // Iterate all columns
		foreach(KeyValuePair<string,Column> entry in cols)
        //foreach (Column col in table.Columns)
        {
		    Column col = entry.Value;
			if ( col.Name =="IsDeleted")
            {
                // Skip
                continue;
            }
            i++;
            string propertyType = GetNetDataType(col.DataType.Name);
			
            // If we can't map it, skip it
            if (string.IsNullOrWhiteSpace(propertyType))
            {
                // Skip
                continue;
            }
 
            // Handle nullable columns by making the type nullable
            if (col.Nullable && propertyType != "string")
            {
                propertyType += "?";
            }
#>
        public <#= propertyType #> <#= col.Name #> { get; set; }
		 
<#
            // Do we insert the space?
            if (i == columnCount-2 && !string.IsNullOrEmpty(transTableName))
            {
#>
		public string DefaultLocale { get; set; }
<#
            }
#>
<#
        }
#>
    }
    

	public class <#=tableName#>UpdateDbViewModel
    {
<# 
        
          i = 0;
 
        // Iterate all columns
		foreach(KeyValuePair<string,Column> entry in cols)      
        {
		    Column col = entry.Value;
            i++;
            string propertyType = GetNetDataType(col.DataType.Name);
			if (col.Name =="UserCreatedById" || col.Name =="CreatedOn")
            {
                // Skip
                continue;
            }
            // If we can't map it, skip it
            if (string.IsNullOrWhiteSpace(propertyType))
            {
                // Skip
                continue;
            }
 
            // Handle nullable columns by making the type nullable
            if (col.Nullable && propertyType != "string")
            {
                propertyType += "?";
            }
#>
        public <#= propertyType #> <#= col.Name #> { get; set; }
 
<#
        }
#>
    }

     public class <#=entityName #>DeleteDbViewModel : DeleteViewModel
    {
       
    }
}


<#
        
    } 
#>




